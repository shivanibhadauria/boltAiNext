"use client";

// Importing necessary modules and components
import { ThemeProvider as NextThemesProvider } from "next-themes"; // For theme management (dark/light mode)
import Header from "@/components/custom/Header"; // Custom header component
import { MassageContext } from "@/context/MassageContext"; // Context to manage massage-related state
import { useEffect, useState } from "react"; // React hooks to manage state and side effects
import { UserContext } from "@/context/UserContext"; // Context to manage user details
import { GoogleOAuthProvider } from "@react-oauth/google"; // Provider for Google OAuth authentication
import { useConvex } from "convex/react"; // Convex hook to interact with the backend
import { api } from "@/convex/_generated/api"; // API routes generated by Convex
import { GetUser } from "@/convex/users"; // Function to fetch user data from Convex
import { AppSideBar } from "@/components/custom/AppSideBar";
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar"
import { ActionContext } from "@/context/ActionContext";
import { useRouter } from "next/navigation";


const Provider = ({ children }) => {
  // State to manage massage and user details
  const [massage, setMassage] = useState([]);
  const [userDetail, setUserDetail] = useState();
  const [action , setAction] = useState();
  const router = useRouter();

  // Convex hook to interact with the Convex backend
  const convex = useConvex();

  // Effect hook to check if the user is authenticated on component mount
  useEffect(() => {
    isAuthenticated(); // Function to verify authentication
  }, []); // Empty dependency array to ensure it runs once on mount

  // Function to check if the user is authenticated
  const isAuthenticated = async () => {
    if (typeof window !== "undefined") {
     
      const storedUser = localStorage.getItem("user");
    
      if (!storedUser) {
        router.push('/');
        return;
      }
      const user = JSON.parse(storedUser); 
     if(!user?.email){

        return;
     }

     
      const result = await convex.query(api.users.GetUser, {
        email: user?.email,
      });

   
      setUserDetail(result);
     
    }
  };

  return (
    // Google OAuth provider to handle authentication
    <GoogleOAuthProvider
      clientId={process.env.NEXT_PUBLIC_GOOGLE_AUTH_CLIENT_ID_KEY} // Use the Google OAuth client ID from environment variables
    >
      {/* User context provider to make user details available throughout the app */}
      <UserContext.Provider value={{ userDetail, setUserDetail }}>
        {/* Massage context provider to share massage state across components */}
        <MassageContext.Provider value={{ massage, setMassage }}>
        
        <ActionContext.Provider value={{ action , setAction }}>  
          <NextThemesProvider
            attribute="class" // Apply theme as a class to the HTML element
            defaultTheme="dark" // Default theme set to dark
            enableSystem 
            disableTransitionOnChange 
          >
            <SidebarProvider defaultOpen={false} >
    <div className="flex flex-col w-full">
            <Header /> 
            <div
            className="flex " > <AppSideBar />
            <main className="flex-1 p-4">{children}</main></div>
      
     
    </div>     </SidebarProvider>

          </NextThemesProvider>
          </ActionContext.Provider>
        </MassageContext.Provider>
      </UserContext.Provider>
    </GoogleOAuthProvider>
  );
};

export default Provider; // Export the provider component for use in the app
